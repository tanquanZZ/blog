package com.endlessblue.basic.base.util;
/*
 * 
 * Copyright (c) CFCA. All Rights Reserved.
 * 
 */

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * TripleDES
 * 
 * Decrypt 3DES cipher text
 * 
 * @version 1.0
 * 
 * @author Feng Lin
 * 
 * @since 2012-03-27 
 */
public class TripleDES {
	
	static int HALF_KEY_LENGTH = 16;
	
	/**
	 * Decrypt 3DES cipher
	 * @param RS random data which is generated by Server(16 bytes, Base64 encoding)
	 * @param RCbinary random data which is generated by Client(16 bytes)
	 * @param cipherText 3DES cipher(Base64 encoding)
	 * @return plain bytes after decryption
	 */
	public static byte[] DecryptCipher(String RS, byte[] RCbinary, String cipherText)
	{
		byte[] plainBinary = null;
		
		// decode base64 cipher
		byte[] tripleDESCipherBinary = Base64.DecodeBase64(cipherText);
		
		// decode base64 RS and check if RS has 16 bytes
	    byte[] RSbinary = Base64.DecodeBase64(RS);

		if(RSbinary.length != HALF_KEY_LENGTH)
		{
			System.err.println("RS length error");
		}
		
		// check if RCbinary has 16 bytes	
		if(RCbinary.length != HALF_KEY_LENGTH)
	    {
			System.err.println("RC length error");
	    }
		
		// construct 3DES key and IV
		byte[] tripleDESKey = new byte[24];
		byte[] IV = new byte[8];	
		int tripleDESKeyIndex = 0;
		int IVIndex = 0;
		
		int m = 0;
		for(; m<HALF_KEY_LENGTH-4; m++)
		{
			tripleDESKey[tripleDESKeyIndex] = RSbinary[m];
			tripleDESKeyIndex++;
		}
		for(; m<HALF_KEY_LENGTH; m++)
		{
			IV[IVIndex] = RSbinary[m];
			IVIndex ++;
		}
		
		// reset m variable
		m = 0;
		for(; m<HALF_KEY_LENGTH-4; m++)
		{
			tripleDESKey[tripleDESKeyIndex] = RCbinary[m];
			tripleDESKeyIndex++;
		}	
		for(; m<HALF_KEY_LENGTH; m++)
		{
			IV[IVIndex] = RCbinary[m];
			IVIndex ++;
		}
		
		SecretKey key3Des = new SecretKeySpec(tripleDESKey,"DESede");
		IvParameterSpec IvSpec = new IvParameterSpec(IV);
		
		try
		{
			Cipher cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
			
			cipher.init(Cipher.DECRYPT_MODE, key3Des, IvSpec);
			plainBinary = cipher.doFinal(tripleDESCipherBinary);
		}
		catch(Exception e)
		{
			System.err.println("DecryptCipher Exception:- " + e);
		}
		
		return plainBinary;
	}

}
